{
  "language": "Solidity",
  "sources": {
    "contracts/Funding.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror Funding__NotOwner();\r\n\r\ncontract Funding {\r\n    using PriceConverter for uint256;\r\n\r\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\r\n    address private immutable _owner;\r\n    address[] private _funders;\r\n    mapping(address => uint256) private _addressToAmountFunded;\r\n    AggregatorV3Interface private _priceFeed;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != _owner) revert Funding__NotOwner();\r\n        _;\r\n    }\r\n\r\n    constructor(address priceFeed) {\r\n        _priceFeed = AggregatorV3Interface(priceFeed);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(msg.value.getConversionRate(_priceFeed) >= MINIMUM_USD, \"You need to spend more ETH!\");\r\n\r\n        _addressToAmountFunded[msg.sender] += msg.value;\r\n        _funders.push(msg.sender);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (uint256 funderIndex = 0; funderIndex < _funders.length; funderIndex++) {\r\n            address funder = _funders[funderIndex];\r\n            _addressToAmountFunded[funder] = 0;\r\n        }\r\n        _funders = new address[](0);\r\n\r\n        (bool success, ) = _owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function cheaperWithdraw() public onlyOwner {\r\n        address[] memory funders = _funders;\r\n\r\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\r\n            address funder = funders[funderIndex];\r\n            _addressToAmountFunded[funder] = 0;\r\n        }\r\n        _funders = new address[](0);\r\n\r\n        (bool success, ) = _owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256) {\r\n        return _addressToAmountFunded[fundingAddress];\r\n    }\r\n\r\n    function getVersion() public view returns (uint256) {\r\n        return _priceFeed.version();\r\n    }\r\n\r\n    function getFunder(uint256 index) public view returns (address) {\r\n        return _funders[index];\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return _priceFeed;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}